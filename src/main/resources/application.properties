## Configuración de la aplicación
# Habilita o deshabilita las referencias circulares en la inyección de dependencias.
# Cuando es 'true', se permiten referencias circulares; cuando es 'false', se lanzará una excepción en caso de referencias circulares.
spring.main.allow-circular-references=true

## Configuración del servidor de aplicaciones
# Cambiamos el puerto del servicio
server.port = 8081

# Configuración del ciclo de vida de los contenedores de Docker
# start-and-stop: Inicia los contenedores de Docker antes de arrancar la aplicación y los para al pararla.
# start: Inicia los contenedores de Docker antes de arrancar la aplicación.
# stop: Para los contenedores de Docker al parar la aplicación.
# none: No inicia ni para los contenedores de Docker.
spring.docker.compose.lifecycle-management = none

# Activamos o desactivamos el uso de Docker Compose
# true: activa el uso de Docker Compose.
# false: desactiva el uso de Docker Compose.
spring.docker.compose.enabled=false

## Configuración de la base de datos
# Configuración del proveedor de la base de datos y de la base de datos a utilizar.
spring.datasource.url=jdbc:postgresql://localhost:5432/curso_springboot
# Configuración del usuario
spring.datasource.username = devdb
# Configuración de la contraseña
spring.datasource.password = a1b2c3d4

## Configuración de JPA (Java Persistence API)
# Ajustamos la estrategia DDL (Data Definition Language)
# Crea las tablas al arrancar la aplicación y las elimina al pararla. (create-drop, create, update, validate, none)
# create-drop: crea las tablas al arrancar la aplicación y las elimina al pararla.
# create: crea las tablas al arrancar la aplicación.
# update: crea las tablas al arrancar la aplicación si no existen y las actualiza si existen.
# validate: valida las tablas al arrancar la aplicación si existen.
# none: no crea ni valida las tablas al arrancar la aplicación.
spring.jpa.hibernate.ddl-auto=create-drop
# Habilita transacciones de jpa mientras se renderiza la vista. (true, false)
spring.jpa.open-in-view = true
# Configuración del dialecto de Hibernate para PostgreSQL (https://docs.jboss.org/hibernate/orm/5.4/javadocs/org/hibernate/dialect/package-summary.html)
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect


## Configuración de la visualización de las consultas SQL en la consola (no para producción)
# Habilita la visualización de las consultas SQL en la consola. (true, false)
spring.jpa.show-sql=true


## Configuración del registro de depuración (debug) de Spring y Hibernate (No para producción)
# Habilita el registro de Spring en nivel DEBUG: muestra las peticiones HTTP en la consola. (DEBUG, INFO, WARN, ERROR, FATAL, OFF)
logging.level.web=DEBUG
# Habilita el registro SQL de Hibernate en nivel DEBUG: muestra las consultas SQL en la consola. (trace, debug, info, warn, error, fatal, off)
logging.level.org.hibernate.SQL=DEBUG
# Habilita el registro de los parámetros SQL de Hibernate en nivel debug: muestra los valores de los parámetros en las consultas SQL. (trace, debug, info, warn, error, fatal, off)
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=debug
