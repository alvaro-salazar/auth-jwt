## Configuracion de la aplicacion

## Configuracion del servidor de aplicaciones
# Cambiamos el puerto del servicio
server.port=${SERVER_PORT:8080}

# Configuracion del ciclo de vida de los contenedores de Docker
# start-and-stop: Inicia los contenedores de Docker antes de arrancar la aplicacion y los para al pararla.
# start: Inicia los contenedores de Docker antes de arrancar la aplicacion.
# stop: Para los contenedores de Docker al parar la aplicacion.
# none: No inicia ni para los contenedores de Docker.
spring.docker.compose.lifecycle-management = start_and_stop

# Activamos o desactivamos el uso de Docker Compose
# true: activa el uso de Docker Compose.
# false: desactiva el uso de Docker Compose.
spring.docker.compose.enabled=false

## Configuracion de la base de datos
# Configuracion del proveedor de la base de datos y de la base de datos a utilizar.
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:5432/curso_springboot}
# Configuracion del usuario
spring.datasource.username=${DB_USERNAME:devdb}
# Configuracion de la contrasena
spring.datasource.password=${DB_PASSWORD:a1b2c3d4}

## Configuracion de JPA (Java Persistence API)
# Ajustamos la estrategia DDL (Data Definition Language)
# Crea las tablas al arrancar la aplicacion y las elimina al pararla. (create-drop, create, update, validate, none)
# create-drop: crea las tablas al arrancar la aplicacion y las elimina al pararla.
# create: crea las tablas al arrancar la aplicacion.
# update: crea las tablas al arrancar la aplicacion si no existen y las actualiza si existen.
# validate: valida las tablas al arrancar la aplicacion si existen.
# none: no crea ni valida las tablas al arrancar la aplicacion.
spring.jpa.hibernate.ddl-auto=${JPA_DDL:create-drop}
# Habilita transacciones de jpa mientras se renderiza la vista. (true, false)
spring.jpa.open-in-view = true

## Configuracion de la visualizacion de las consultas SQL en la consola (no para produccion)
# Habilita la visualizacion de las consultas SQL en la consola. (true, false)
spring.jpa.show-sql=true

# Habilita o deshabilita las referencias circulares en la inyeccion de dependencias.
# Cuando es 'true', se permiten referencias circulares; cuando es 'false', se lanzara una excepcion en caso de referencias circulares.
spring.main.allow-circular-references=true

## Configuracion del registro de depuracion (debug) de Spring y Hibernate (No para produccion)
# Habilita el registro de Spring en nivel DEBUG: muestra las peticiones HTTP en la consola. (DEBUG, INFO, WARN, ERROR, FATAL, OFF)
logging.level.web=DEBUG
# Habilita el registro SQL de Hibernate en nivel DEBUG: muestra las consultas SQL en la consola. (trace, debug, info, warn, error, fatal, off)
logging.level.org.hibernate.SQL=DEBUG
# Habilita el registro de los parametros SQL de Hibernate en nivel debug: muestra los valores de los parametros en las consultas SQL. (trace, debug, info, warn, error, fatal, off)
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=debug
